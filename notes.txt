


multipart formdata is used to upload images as form data,
// so we need to add the image to the form data,
// and then send the form data to the server.
// We use the 'multipart/form-data' boundary to separate the image from the other form data.
const formData = new FormData();
formData.append('image', imageFile)
formData.append('otherData', 'otherData')

------------------------------------------------------------------

blob - binary large object,
it is used to upload images as binary data 
// We use the 'blob' type to upload images as binary data.
// We create a new blob object from the image file
const blob = new Blob([imageFile], { type: 'image/jpeg' })
// We send the blob to the server using the 'blob' type
fetch('/upload', {
  method: 'POST',
  body: blob,
  headers: {
    'Content-Type': 'application/octet-stream',
    },
    })

-------------------------------------------------------------------

lean() method is used to optimize queries when you do not need Mongoose's full document functionality. When you call lean() on a query, Mongoose returns plain JavaScript objects instead of Mongoose documents.Since plain JavaScript objects are simpler and faster to create and manipulate than Mongoose documents, using lean() can result in faster query execution.

. This can lead to performance improvements

When to Use lean()
You should use lean() when:

You are performing read-only operations and do not need to modify the documents.
You want to improve performance for large datasets.
You want to reduce memory usage.

////////////////////////////////////////////////

The populate('user') method in Mongoose is used to replace the specified field in a document with the actual data from a related document. This is particularly useful when you have references between collections, allowing you to retrieve related data in a single query.
    Benefits of Using Populate

Simplifies Data Retrieval: Instead of manually querying the user collection for each post, populate allows you to fetch all related user data in one go.

Improves Readability: The code becomes cleaner and easier to understand, as it abstracts the complexity of multiple queries.

Supports Nested Population: You can also populate fields within populated documents, allowing for complex data structures to be easily navigated.

Considerations

Performance: While populate is convenient, it can lead to performance issues if overused, especially with large datasets. Each populate call results in an additional query to the database.

Use of select: You can specify which fields to include or exclude in the populated documents to optimize performance:

Using populate effectively can greatly enhance the efficiency and clarity of your Mongoose queries.

/////////////////////////////////////////////////////////////////////////////////////////////////

# # Moments module is used to handle and manipulate dates and times in JavaScript easily.

////////////////////////////////////////////////////////////////////