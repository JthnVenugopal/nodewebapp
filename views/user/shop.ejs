<%- include("../../views/partials/user/header") %>

<style>
    body {
       background-color: #fffad332;
        font-family: Arial, sans-serif;
        background-repeat: repeat-y;
        height: 1500px;
    }

    .breadcrumb {
        background-color: transparent;
    }

    .page-header {
        margin-bottom: 20px;
    }

    .filter-section {
        background-color: #ffffff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .product-card {
        transition: transform 0.2s;
        
    }

    .card:hover {
        transform: scale(1.10);
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        transition: 0.5s;
    }

  

    #paginationContainer button.active {
        background-color: #007bff;
        color: white;
    }

    #paginationContainer button:hover {
        background-color: #0056b3;
        color: white;
    }

    .btn-custom {
        font-size: 12px;
        padding: 8px 12px;
    }

    .filter-button {
        margin-top: 20px;
    }

    .list-group-item {
        cursor: pointer;
    }

    .list-group-item.active {
        background-color: #007bff;
        color: white;
    }

    @media (max-width: 768px) {
        .filter-section {
            margin-bottom: 20px;
        }
    }
</style>

<body>
    <div class="page-header breadcrumb-wrap my-5">
        <div class="container">
            <nav aria-label="Breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="#" rel="nofollow">Home</a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">Shop</li>
                </ol>
            </nav>
        </div>
    </div>

    <div class="container my-5">
        <div class="row">
            <!-- Filters Section -->
            <div class="col-lg-3 d-flex flex-column filter-section" style="font-size: 20px;">
                <h5 class="my-2">Filter Products</h5>
                <form id="filterForm">
                    <!-- Search Bar -->
                    <div class="mb-3">
                        <input type="text" name="search" id="search" class="form-control form-control-sm" placeholder="Search Products" aria-label="Search Products" />
                    </div>
                    <!-- Category List -->
                    <div class="mb-3">
                        <label for="categoryList" class="form-label">Select Category</label>
                        <ul id="categoryList" class="list-group">
                            <li class="list-group-item active" data-value="">All Categories</li>
                            <% categories.forEach(category => { %>
                                <li class="list-group-item" data-value="<%= category._id %>"><%= category.name %></li>
                            <% }) %>
                        </ul>
                    </div>
                    <!-- Brand List -->
                    <div class="mb-3">
                        <label for="brandList" class="form-label">Select Brand</label>
                        <ul id="brandList" class="list-group">
                            <li class="list-group-item active" data-value="">All Brands</li>
                            <% brands.forEach(brand => { %>
                                <li class="list-group-item" data-value="<%= brand._id %>"><%= brand.brandName %></li>
                            <% }) %>
                        </ul>
                    </div>
                    <!-- Price List -->
                    <div class="mb-3">
                        <label for="priceList" class="form-label">Select Price Range</label>
                        <ul id="priceList" class="list-group">
                            <li class="list-group-item active" data-value="">All Prices</li>
                            <li class="list-group-item" data-value="below1000">Below ₹1000</li>
                            <li class="list-group-item" data-value="1000-2000">₹1000 - ₹2000</li>
                            <li class="list-group-item" data-value="2000-3000">₹2000 - ₹3000</ li>
                            <li class="list-group-item" data-value="3000-4000">₹3000 - ₹4000</li>
                            <li class="list-group-item" data-value="4000-5000">₹4000 - ₹5000</li>
                            <li class="list-group-item" data-value="above5000">Above ₹5000</li>
                        </ul>
                    </div>



                    <!-- Sort List -->
                    <div class="mb-3">
                        <label for="sortList" class="form-label">Sort By</label>
                        <ul id="sortList" class="list-group">
                            <li class="list-group-item active" data-value="">Default</li>
                            <li class="list-group-item" data-value="popularity">Popularity</li>
                            <li class="list-group-item" data-value="priceAsc">Price: Low to High</li>
                            <li class="list-group-item" data-value="priceDesc">Price: High to Low</li>
                            <li class="list-group-item" data-value="averageRating">Average Ratings</li>
                            <li class="list-group-item" data-value="nameAsc">Name: A-Z</li>
                            <li class="list-group-item" data-value="nameDesc">Name: Z-A</li>
                        </ul>
                    </div>



                    
                </form>
            </div>

            <!-- Products Section -->
            <div class="col-lg-9 my-5">
                <div class="row" id="productsContainer">
                    <% products.forEach(product => { %>
                        <div class="col-lg-4 col-md-6 mb-4 product-card" 
                             data-category="<%= product.category %>" 
                             data-brand="<%= product.brand %>" 
                             data-name="<%= product.productName.toLowerCase() %>"
                             data-popularity="<%= product.popularity %>"
                             data-price="<%= product.variant.salePrice %>"
                             data-rating="<%= product.averageRating %>"
                             data-created-at="<%= product.createdAt %>"> <!-- Added created-at attribute -->
                            <a href="/productDetails?id=<%= product._id %>">
                                <div class="card h-100 shadow-sm">
                                    <% if (product.variant.productImages && product.variant.productImages.length > 0) { %>
                                        <img style="height: 150px; width: 160px; object-fit: cover; margin-left: 20%;" src="/uploads/re-image/<%= product.variant.productImages[0] %>" class="card-img-top" alt ="<%= product.productName %>">
                                    <% } %>
                                    <div class="card-body">
                                        <h5 class="card-title"><%= product.productName %></h5>
                                        <p class="text-success font-weight-bold">₹<%= product.variant.salePrice.toLocaleString('en-IN') %></p>
                                        <% if (product.variant.quantity > 0) { %>
                                            <p class="text-success">In Stock: <%= product.variant.quantity %></p>
                                        <% } else { %>
                                            <p class="text-danger">Out of Stock</p>
                                        <% } %>
                                    </div>
                                </div>
                            </a>
                        </div>
                    <% }) %>
                </div>
                <!-- Pagination Section -->
                <div id="paginationContainer" class="d-flex justify-content-center mt-4"></div>
            </div>
        </div>
    </div>

    <%- include("../../views/partials/user/footer") %>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const filterForm = document.getElementById('filterForm');
            const searchInput = document.getElementById('search');
            const categoryList = document.getElementById('categoryList');
            const brandList = document.getElementById('brandList');
            const sortList = document.getElementById('sortList');
            const priceList = document.getElementById('priceList');
            const productsContainer = document.getElementById('productsContainer');
            const paginationContainer = document.getElementById('paginationContainer');
            let currentPage = 1;
            const productsPerPage = 15;

            // Sort products by created-at date on page load
            const productCards = Array.from(document.querySelectorAll('.product-card'));
            productCards.sort((a, b) => new Date(b.getAttribute('data-created-at')) - new Date(a.getAttribute('data-created-at')));
            productCards.forEach(card => productsContainer.appendChild(card)); // Re-append sorted cards

            // Event listeners for filters
            searchInput.addEventListener('input', applyFilters);
            categoryList.addEventListener('click', handleCategoryClick);
            brandList.addEventListener('click', handleBrandClick);
            priceList.addEventListener('click', handlePriceClick);
            sortList.addEventListener('click', handleSortClick);

            function handleCategoryClick(event) {
                if (event.target.classList.contains('list-group-item')) {
                    Array.from(categoryList.children).forEach(item => item.classList.remove('active'));
                    event.target.classList.add('active');
                }
                applyFilters();
            }

            function handleBrandClick(event) {
                if (event.target.classList.contains('list-group-item')) {
                    Array.from(brandList.children).forEach(item => item.classList.remove('active'));
                    event.target.classList.add('active');
                }
                applyFilters();
            }

            function handlePriceClick(event) {
                if (event.target.classList.contains('list-group-item')) {
                    Array.from(priceList.children).forEach(item => item.classList.remove('active'));
                    event.target.classList.add('active');
                }
                applyFilters();
            }

            function handleSortClick(event) {
                if (event.target.classList.contains('list-group-item')) {
                    Array.from(sortList.children).forEach(item => item.classList.remove('active'));
                    event.target.classList.add('active');
                }
                applyFilters();
            }

            function applyFilters() {
                currentPage = 1; // Reset to the first page
                const searchValue = searchInput.value.toLowerCase();
                const selectedCategory = categoryList.querySelector('.active').getAttribute('data-value');
                const selectedBrand = brandList.querySelector('.active').getAttribute('data-value');
                const selectedPrice = priceList.querySelector('.active').getAttribute('data-value');

                const filteredProducts = productCards.filter(card => {
                    const productName = card.getAttribute('data-name');
                    const productCategory = card.getAttribute('data-category');
                    const productBrand = card.getAttribute('data-brand');
                    const productPrice = parseFloat(card.getAttribute('data-price'));

                    let isVisible = true;

                    if (searchValue && !productName.includes(searchValue)) isVisible = false;
                    if (selectedCategory && productCategory !== selectedCategory) isVisible = false;
                    if (selectedBrand && productBrand !== selectedBrand) isVisible = false;
                    if (selectedPrice) {
                        const ranges = {
                            below1000: productPrice < 1000,
                            '1000-2000': productPrice >= 1000 && productPrice <= 2000,
                            '2000-3000': productPrice >= 2000 && productPrice <= 3000,
                            '3000-4000': productPrice >= 3000 && productPrice <= 4000,
                            '4000-5000': productPrice >= 4000 && productPrice <= 5000,
                            above5000: productPrice > 5000,
                        };
                        if (!ranges[selectedPrice]) isVisible = false;
                    }

                    card.style.display = isVisible ? 'block' : 'none';
                    return isVisible;
                });

                paginateProducts(filteredProducts);
            }

            function paginateProducts(visibleProducts) {
                const totalPages = Math.ceil(visibleProducts.length / productsPerPage);
                paginationContainer.innerHTML = '';
                for (let i = 1; i <= totalPages; i++) {
                    const button = document.createElement('button');
                    button.textContent = i;
                    button.classList.add('btn', 'btn-light', 'mx-1');
                    if (i === currentPage) button.classList.add('active');
                    button.addEventListener('click', () => {
                        currentPage = i;
                        showPage(visibleProducts, i);
                    });
                    paginationContainer.appendChild(button);
                }
                showPage(visibleProducts, currentPage);
            }

            function showPage(visibleProducts, page) {
                const start = (page - 1) * productsPerPage;
                const end = start + productsPerPage;
                visibleProducts.forEach((card, index) => {
                    card.style.display = index >= start && index < end ? 'block' : 'none';
                });
            }

            applyFilters();
        });




        document.querySelectorAll('#sortList .list-group-item').forEach(item => {
    item.addEventListener('click', function() {
        document.querySelectorAll('#sortList .list-group-item').forEach(i => i.classList.remove('active'));
        this.classList.add('active');
        
        const sortValue = this.getAttribute('data-value');
        console.log("Selected sort value:", sortValue); // Debugging log
        submitSortForm(sortValue);
    });
});

function submitSortForm(sortValue) {
    const formData = new FormData();
    formData.append('sort', sortValue);

    fetch('/sortProducts', {
        method: 'POST',
        body: formData,
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.text();
    })
    .then(data => {
        const parser = new DOMParser();
        const doc = parser.parseFromString(data, 'text/html');
        const newProducts = doc.querySelector('#productsContainer').innerHTML;
        document.getElementById('productsContainer').innerHTML = newProducts;
    })
    .catch(error => console.error('Error:', error));
}
    </script>





    

</body>